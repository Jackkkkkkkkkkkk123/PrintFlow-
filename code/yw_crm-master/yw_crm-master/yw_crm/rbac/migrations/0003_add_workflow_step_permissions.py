# Generated by Django for workflow step permissions

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('rbac', '0002_auto_20190510_1209'),
    ]

    operations = [
        migrations.CreateModel(
            name='WorkflowStepPermissionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='权限类型名称')),
                ('description', models.CharField(max_length=200, verbose_name='权限描述')),
            ],
            options={
                'verbose_name': '步骤权限类型',
                'verbose_name_plural': '步骤权限类型',
            },
        ),
        migrations.CreateModel(
            name='WorkflowStepPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='权限名称')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='权限描述')),
                ('print_type', models.CharField(choices=[('cover', '封面印刷'), ('content', '内文印刷'), ('both', '封面+内文'), ('all', '所有类型')], default='all', max_length=20, verbose_name='适用印刷类型')),
                ('allowed_steps', models.TextField(blank=True, help_text='JSON格式存储允许操作的步骤名称列表，如["印刷", "覆膜"]', null=True, verbose_name='允许操作的步骤')),
                ('time_restriction', models.CharField(choices=[('none', '无时间限制'), ('working_hours', '仅工作时间'), ('specific_hours', '指定时间段')], default='none', max_length=20, verbose_name='时间限制')),
                ('start_time', models.TimeField(blank=True, null=True, verbose_name='开始时间')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='结束时间')),
                ('max_concurrent_steps', models.IntegerField(default=0, help_text='0表示无限制，大于0表示用户同时最多能操作的步骤数', verbose_name='最大并发步骤数')),
                ('require_previous_complete', models.BooleanField(default=True, help_text='是否要求前面的步骤必须完成才能操作当前步骤', verbose_name='要求前置步骤完成')),
                ('require_approval', models.BooleanField(default=False, help_text='某些重要步骤是否需要上级审批', verbose_name='需要审批')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('approver_roles', models.ManyToManyField(blank=True, help_text='有权审批此操作的角色', to='rbac.Role', verbose_name='审批者角色')),
                ('permission_types', models.ManyToManyField(help_text='选择用户可以执行的操作，如开始、完成、跳过等', to='rbac.WorkflowStepPermissionType', verbose_name='允许的操作类型')),
            ],
            options={
                'verbose_name': '工作流程步骤权限',
                'verbose_name_plural': '工作流程步骤权限',
                'ordering': ['print_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowStepOperationLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_no', models.CharField(max_length=32, verbose_name='订单号')),
                ('step_name', models.CharField(max_length=100, verbose_name='步骤名称')),
                ('print_type', models.CharField(max_length=20, verbose_name='印刷类型')),
                ('operation_type', models.CharField(choices=[('start', '开始步骤'), ('complete', '完成步骤'), ('skip', '跳过步骤'), ('approve', '审批操作'), ('reject', '拒绝操作')], max_length=20, verbose_name='操作类型')),
                ('operator_id', models.IntegerField(verbose_name='操作员ID')),
                ('operator_name', models.CharField(max_length=50, verbose_name='操作员姓名')),
                ('operator_roles', models.TextField(help_text='JSON格式存储', verbose_name='操作员角色')),
                ('permission_used', models.CharField(blank=True, max_length=100, verbose_name='使用的权限')),
                ('permission_check_result', models.BooleanField(verbose_name='权限检查结果')),
                ('permission_check_details', models.TextField(blank=True, help_text='JSON格式存储权限检查的详细信息', verbose_name='权限检查详情')),
                ('success', models.BooleanField(verbose_name='操作是否成功')),
                ('error_message', models.TextField(blank=True, verbose_name='错误信息')),
                ('note', models.TextField(blank=True, verbose_name='操作备注')),
                ('operation_time', models.DateTimeField(auto_now_add=True, verbose_name='操作时间')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP地址')),
                ('user_agent', models.TextField(blank=True, verbose_name='用户代理')),
            ],
            options={
                'verbose_name': '步骤操作日志',
                'verbose_name_plural': '步骤操作日志',
                'ordering': ['-operation_time'],
            },
        ),
        migrations.AddField(
            model_name='role',
            name='workflow_step_permissions',
            field=models.ManyToManyField(blank=True, help_text='角色拥有的具体工作流程步骤操作权限', to='rbac.WorkflowStepPermission', verbose_name='工作流程步骤权限'),
        ),
        migrations.AddIndex(
            model_name='workflowstepoperationlog',
            index=models.Index(fields=['order_no', 'operation_time'], name='rbac_workfl_order_n_b9a6c1_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowstepoperationlog',
            index=models.Index(fields=['operator_id', 'operation_time'], name='rbac_workfl_operato_a1b5f8_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowstepoperationlog',
            index=models.Index(fields=['step_name', 'print_type'], name='rbac_workfl_step_na_7e4c6d_idx'),
        ),
    ]


def create_initial_step_permission_types(apps, schema_editor):
    """创建初始的步骤权限类型"""
    WorkflowStepPermissionType = apps.get_model('rbac', 'WorkflowStepPermissionType')
    
    permission_types = [
        {'name': 'start', 'description': '开始步骤 - 允许用户开始执行工作步骤'},
        {'name': 'complete', 'description': '完成步骤 - 允许用户完成/确认工作步骤'},
        {'name': 'skip', 'description': '跳过步骤 - 允许用户跳过非必需的工作步骤'},
        {'name': 'view', 'description': '查看步骤 - 允许用户查看步骤详情和状态'},
        {'name': 'edit_note', 'description': '编辑备注 - 允许用户修改步骤备注信息'},
        {'name': 'approve', 'description': '审批操作 - 允许用户审批需要上级确认的操作'},
    ]
    
    for perm_type in permission_types:
        WorkflowStepPermissionType.objects.get_or_create(
            name=perm_type['name'],
            defaults={'description': perm_type['description']}
        )


def create_default_step_permissions(apps, schema_editor):
    """创建默认的步骤权限配置"""
    WorkflowStepPermission = apps.get_model('rbac', 'WorkflowStepPermission')
    WorkflowStepPermissionType = apps.get_model('rbac', 'WorkflowStepPermissionType')
    
    # 获取权限类型
    start_type = WorkflowStepPermissionType.objects.get(name='start')
    complete_type = WorkflowStepPermissionType.objects.get(name='complete')
    skip_type = WorkflowStepPermissionType.objects.get(name='skip')
    view_type = WorkflowStepPermissionType.objects.get(name='view')
    
    # 创建默认权限配置
    default_permissions = [
        {
            'name': '封面印刷操作员',
            'description': '可以操作所有封面印刷相关步骤',
            'print_type': 'cover',
            'allowed_steps': '["印刷", "覆膜", "烫金", "压痕", "压纹", "模切", "击凸", "过油", "外调"]',
            'permission_types': [start_type.id, complete_type.id, skip_type.id, view_type.id],
        },
        {
            'name': '内文印刷操作员',
            'description': '可以操作所有内文印刷相关步骤',
            'print_type': 'content',
            'allowed_steps': '["调图", "CTP", "切纸", "印刷", "折页", "锁线", "胶包", "马订", "勒口", "夹卡片", "配本(塑封)", "打包", "送货"]',
            'permission_types': [start_type.id, complete_type.id, skip_type.id, view_type.id],
        },
        {
            'name': '印刷专员',
            'description': '只能操作印刷相关步骤',
            'print_type': 'all',
            'allowed_steps': '["印刷", "内文印刷"]',
            'permission_types': [start_type.id, complete_type.id, view_type.id],
        },
        {
            'name': '后处理专员',
            'description': '负责印后加工步骤',
            'print_type': 'cover',
            'allowed_steps': '["覆膜", "烫金", "压痕", "压纹", "模切", "击凸", "过油"]',
            'permission_types': [start_type.id, complete_type.id, skip_type.id, view_type.id],
        },
        {
            'name': '装订专员',
            'description': '负责装订相关步骤',
            'print_type': 'content',
            'allowed_steps': '["折页", "锁线", "胶包", "马订", "勒口", "夹卡片", "配本(塑封)"]',
            'permission_types': [start_type.id, complete_type.id, skip_type.id, view_type.id],
        },
        {
            'name': '仓储配送专员',
            'description': '负责打包送货步骤',
            'print_type': 'content',
            'allowed_steps': '["打包", "送货"]',
            'permission_types': [start_type.id, complete_type.id, view_type.id],
        },
    ]
    
    for perm_data in default_permissions:
        # 获取或创建权限
        permission, created = WorkflowStepPermission.objects.get_or_create(
            name=perm_data['name'],
            defaults={
                'description': perm_data['description'],
                'print_type': perm_data['print_type'],
                'allowed_steps': perm_data['allowed_steps'],
            }
        )
        
        if created:
            # 添加权限类型
            for perm_type_id in perm_data['permission_types']:
                permission.permission_types.add(perm_type_id)


class ExtendedMigration(Migration):
    def __init__(self, name, app_label):
        super().__init__(name, app_label)
        # 在operations后添加数据初始化
        self.operations.extend([
            migrations.RunPython(create_initial_step_permission_types),
            migrations.RunPython(create_default_step_permissions),
        ]) 